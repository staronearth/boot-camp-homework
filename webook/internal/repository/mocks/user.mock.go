// Code generated by MockGen. DO NOT EDIT.
// Source: D:\\peoject\\gitee\\boot-camp-homework\\boot-camp-homework\\webook\\internal\\repository\\user.go

// Package repomocks is a generated GoMock package.
package repomocks

import (
	domain "boot-camp-homework/webook/internal/domain"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserRepository) Create(ctx context.Context, u domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockUserRepositoryMockRecorder) Create(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserRepository)(nil).Create), ctx, u)
}

// CreateUserInfo mocks base method.
func (m *MockUserRepository) CreateUserInfo(ctx context.Context, info domain.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserInfo", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUserInfo indicates an expected call of CreateUserInfo.
func (mr *MockUserRepositoryMockRecorder) CreateUserInfo(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserInfo", reflect.TypeOf((*MockUserRepository)(nil).CreateUserInfo), ctx, info)
}

// FindByEmail mocks base method.
func (m *MockUserRepository) FindByEmail(ctx context.Context, u domain.User) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, u)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserRepositoryMockRecorder) FindByEmail(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindByEmail), ctx, u)
}

// FindByPhone mocks base method.
func (m *MockUserRepository) FindByPhone(ctx context.Context, phone string) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", ctx, phone)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockUserRepositoryMockRecorder) FindByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockUserRepository)(nil).FindByPhone), ctx, phone)
}

// FindUserInfoTableById mocks base method.
func (m *MockUserRepository) FindUserInfoTableById(ctx context.Context, idx int64) (domain.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserInfoTableById", ctx, idx)
	ret0, _ := ret[0].(domain.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserInfoTableById indicates an expected call of FindUserInfoTableById.
func (mr *MockUserRepositoryMockRecorder) FindUserInfoTableById(ctx, idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserInfoTableById", reflect.TypeOf((*MockUserRepository)(nil).FindUserInfoTableById), ctx, idx)
}

// FindUserTableById mocks base method.
func (m *MockUserRepository) FindUserTableById(ctx context.Context, idx int64) (domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserTableById", ctx, idx)
	ret0, _ := ret[0].(domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserTableById indicates an expected call of FindUserTableById.
func (mr *MockUserRepositoryMockRecorder) FindUserTableById(ctx, idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserTableById", reflect.TypeOf((*MockUserRepository)(nil).FindUserTableById), ctx, idx)
}

// UpdateUserInfo mocks base method.
func (m *MockUserRepository) UpdateUserInfo(ctx context.Context, info domain.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", ctx, info)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockUserRepositoryMockRecorder) UpdateUserInfo(ctx, info interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserInfo), ctx, info)
}
