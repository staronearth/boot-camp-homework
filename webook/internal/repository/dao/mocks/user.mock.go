// Code generated by MockGen. DO NOT EDIT.
// Source: D:\\peoject\\gitee\\boot-camp-homework\\boot-camp-homework\\webook\\internal\\repository\\dao\\user.go

// Package daomocks is a generated GoMock package.
package daomocks

import (
	dao "boot-camp-homework/webook/internal/repository/dao"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUserDAO is a mock of UserDAO interface.
type MockUserDAO struct {
	ctrl     *gomock.Controller
	recorder *MockUserDAOMockRecorder
}

// MockUserDAOMockRecorder is the mock recorder for MockUserDAO.
type MockUserDAOMockRecorder struct {
	mock *MockUserDAO
}

// NewMockUserDAO creates a new mock instance.
func NewMockUserDAO(ctrl *gomock.Controller) *MockUserDAO {
	mock := &MockUserDAO{ctrl: ctrl}
	mock.recorder = &MockUserDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDAO) EXPECT() *MockUserDAOMockRecorder {
	return m.recorder
}

// FindByEmail mocks base method.
func (m *MockUserDAO) FindByEmail(ctx context.Context, email string) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", ctx, email)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockUserDAOMockRecorder) FindByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockUserDAO)(nil).FindByEmail), ctx, email)
}

// FindByPhone mocks base method.
func (m *MockUserDAO) FindByPhone(ctx context.Context, phone string) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", ctx, phone)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockUserDAOMockRecorder) FindByPhone(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockUserDAO)(nil).FindByPhone), ctx, phone)
}

// FindUserInfoTableById mocks base method.
func (m *MockUserDAO) FindUserInfoTableById(ctx context.Context, idx int64) (dao.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserInfoTableById", ctx, idx)
	ret0, _ := ret[0].(dao.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserInfoTableById indicates an expected call of FindUserInfoTableById.
func (mr *MockUserDAOMockRecorder) FindUserInfoTableById(ctx, idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserInfoTableById", reflect.TypeOf((*MockUserDAO)(nil).FindUserInfoTableById), ctx, idx)
}

// FindUserTableById mocks base method.
func (m *MockUserDAO) FindUserTableById(ctx context.Context, idx int64) (dao.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserTableById", ctx, idx)
	ret0, _ := ret[0].(dao.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserTableById indicates an expected call of FindUserTableById.
func (mr *MockUserDAOMockRecorder) FindUserTableById(ctx, idx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserTableById", reflect.TypeOf((*MockUserDAO)(nil).FindUserTableById), ctx, idx)
}

// Insert mocks base method.
func (m *MockUserDAO) Insert(ctx context.Context, u dao.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUserDAOMockRecorder) Insert(ctx, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserDAO)(nil).Insert), ctx, u)
}

// InsertUserInfo mocks base method.
func (m *MockUserDAO) InsertUserInfo(ctx context.Context, uinfo dao.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserInfo", ctx, uinfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserInfo indicates an expected call of InsertUserInfo.
func (mr *MockUserDAOMockRecorder) InsertUserInfo(ctx, uinfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserInfo", reflect.TypeOf((*MockUserDAO)(nil).InsertUserInfo), ctx, uinfo)
}

// UpdateUserInfo mocks base method.
func (m *MockUserDAO) UpdateUserInfo(ctx context.Context, uinfo dao.UserInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserInfo", ctx, uinfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserInfo indicates an expected call of UpdateUserInfo.
func (mr *MockUserDAOMockRecorder) UpdateUserInfo(ctx, uinfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserInfo", reflect.TypeOf((*MockUserDAO)(nil).UpdateUserInfo), ctx, uinfo)
}
